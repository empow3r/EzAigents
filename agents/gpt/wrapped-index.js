#!/usr/bin/env node

/**
 * Wrapped GPT Agent
 * 
 * This wraps the existing GPT agent with auto-scaling and coordination features
 */

const UniversalAgentWrapper = require('../../cli/universal-agent-wrapper');
const path = require('path');

class WrappedGPTAgent extends UniversalAgentWrapper {
  constructor() {
    super('gpt', path.join(__dirname, 'index.js'), [
      'backend-logic', 'api-design', 'implementation', 'frontend', 'debugging'
    ]);
  }

  /**
   * GPT-specific task execution enhancements
   */
  async executeTask(task) {
    console.log(`ðŸ¤– Wrapped GPT executing: ${task.file || task.description}`);
    
    // Add GPT-specific context
    const gptTask = {
      ...task,
      gpt_context: {
        focus: 'implementation and logic',
        expertise: ['backend development', 'API design', 'problem solving'],
        approach: 'practical implementation with working code'
      }
    };
    
    // Execute with enhanced context
    const result = await super.executeTask(gptTask);
    
    // Add GPT-specific metadata
    if (result.success) {
      result.gpt_metadata = {
        implementation_ready: true,
        api_endpoints_designed: true,
        error_handling_included: true,
        testing_considerations: true
      };
    }
    
    return result;
  }

  /**
   * GPT-specific fallback
   */
  async generateFallbackResult(task, error) {
    const prompt = task.prompt || task.description || '';
    const file = task.file || '';
    
    return {
      implementation: `GPT Implementation for ${file || 'system'}`,
      backend_logic: [
        'Implement proper business logic',
        'Add comprehensive error handling',
        'Ensure proper data validation'
      ],
      api_design: [
        'Design RESTful API endpoints',
        'Implement proper HTTP status codes',
        'Add request/response validation'
      ],
      code_structure: [
        'Use proper MVC architecture',
        'Implement service layer pattern',
        'Add proper dependency injection'
      ],
      debugging_tips: [
        'Add comprehensive logging',
        'Implement proper error tracking',
        'Use debugging tools effectively'
      ],
      frontend_considerations: [
        'Ensure responsive design',
        'Implement proper state management',
        'Add user-friendly error messages'
      ],
      gpt_signature: 'Generated by GPT with implementation focus',
      fallback_reason: error?.message || 'Original GPT agent unavailable'
    };
  }
}

// Run the wrapped GPT agent if this file is executed directly
if (require.main === module) {
  const agent = new WrappedGPTAgent();
  
  // Start the agent
  agent.start().catch(error => {
    console.error('Failed to start wrapped GPT agent:', error);
    process.exit(1);
  });
  
  // Graceful shutdown
  process.on('SIGINT', async () => {
    console.log('\nðŸ›‘ Shutting down wrapped GPT agent...');
    await agent.shutdown();
    process.exit(0);
  });
  
  process.on('SIGTERM', async () => {
    console.log('\nðŸ›‘ Shutting down wrapped GPT agent...');
    await agent.shutdown();
    process.exit(0);
  });
}

module.exports = WrappedGPTAgent;