# Ultra-fast Dockerfile - Maximum speed optimizations
FROM node:18-alpine

WORKDIR /app

# Install only essential system deps
RUN apk add --no-cache wget

# Copy only package files first for better layer caching
COPY package.json ./

# Ultra-fast npm install with maximum optimizations
RUN npm config set registry https://registry.npmjs.org/ && \
    npm config set fetch-retry-mintimeout 5000 && \
    npm config set fetch-retry-maxtimeout 30000 && \
    npm config set fetch-timeout 60000 && \
    npm config set maxsockets 50 && \
    npm config set progress false && \
    npm config set audit false && \
    npm config set fund false && \
    npm install --omit=dev --omit=optional --legacy-peer-deps --no-audit --no-fund --prefer-offline

# Copy minimal source (most files excluded via .dockerignore)
COPY . .

# Ultra-fast build with maximum optimizations
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1
ENV NEXT_SHARP=0
ENV CI=true
ENV SKIP_VALIDATION=true
ENV DISABLE_ESLINT_PLUGIN=true

# Build with maximum memory and no type checking
RUN node --max-old-space-size=8192 ./node_modules/.bin/next build --no-lint

# Create user quickly
RUN addgroup -S nodejs && adduser -S nextjs -G nodejs

# Set ownership
RUN chown -R nextjs:nodejs /app

USER nextjs

EXPOSE 3000

# Start with npm start (fastest startup)
CMD ["npm", "start"]