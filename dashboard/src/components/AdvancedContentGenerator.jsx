'use client';
import React, { useState, useEffect } from 'react';
import { 
  contentGenerationService, 
  getTemplatesByCategory, 
  getRecommendedAgent,
  estimateGenerationTime,
  formatContentTemplate,
  generateOptimizationSuggestions
} from '../services/contentGenerationService';
import { businessContentService } from '../services/businessContentService';

const AdvancedContentGenerator = () => {
  const [activeTab, setActiveTab] = useState('workflow');
  const [selectedCategory, setSelectedCategory] = useState('business');
  const [selectedTemplate, setSelectedTemplate] = useState('');
  const [templateVariables, setTemplateVariables] = useState({});
  const [customPrompt, setCustomPrompt] = useState('');
  const [selectedAgent, setSelectedAgent] = useState('claude');
  const [generatedContent, setGeneratedContent] = useState('');
  const [contentHistory, setContentHistory] = useState([]);
  const [loading, setLoading] = useState(false);
  const [currentWorkflow, setCurrentWorkflow] = useState([]);
  const [qualityAnalysis, setQualityAnalysis] = useState(null);

  // Workflow management
  const [workflowSteps, setWorkflowSteps] = useState([
    { id: 1, type: 'research', title: 'Research Phase', status: 'pending', agent: 'webscraper' },
    { id: 2, type: 'outline', title: 'Content Outline', status: 'pending', agent: 'claude' },
    { id: 3, type: 'generation', title: 'Content Generation', status: 'pending', agent: 'gpt' },
    { id: 4, type: 'review', title: 'Quality Review', status: 'pending', agent: 'deepseek' },
    { id: 5, type: 'optimization', title: 'SEO Optimization', status: 'pending', agent: 'gemini' }
  ]);

  const categories = Object.keys(contentGenerationService.templates);
  const agents = Object.values(contentGenerationService.agents);

  useEffect(() => {
    loadContentHistory();
    if (selectedTemplate && selectedCategory) {
      const recommended = getRecommendedAgent(selectedTemplate, selectedCategory);
      setSelectedAgent(recommended.id);
    }
  }, [selectedTemplate, selectedCategory]);

  const loadContentHistory = () => {
    try {
      const history = localStorage.getItem('advancedContentHistory');
      if (history) {
        setContentHistory(JSON.parse(history));
      }
    } catch (error) {
      console.error('Error loading content history:', error);
    }
  };

  const saveToHistory = (content, metadata) => {
    const historyItem = {
      id: Date.now(),
      content,
      metadata,
      timestamp: new Date().toISOString(),
      qualityScore: qualityAnalysis?.overallScore || 0
    };
    
    const updatedHistory = [historyItem, ...contentHistory.slice(0, 19)];
    setContentHistory(updatedHistory);
    localStorage.setItem('advancedContentHistory', JSON.stringify(updatedHistory));
  };

  const updateTemplateVariable = (key, value) => {
    setTemplateVariables(prev => ({
      ...prev,
      [key]: value
    }));
  };

  const generateSingleContent = async () => {
    if (!selectedTemplate && !customPrompt.trim()) {
      alert('Please select a template or enter a custom prompt');
      return;
    }

    setLoading(true);
    
    try {
      let prompt = customPrompt;
      
      if (selectedTemplate) {
        prompt = formatContentTemplate(selectedTemplate, selectedCategory, templateVariables);
      }

      const task = {
        prompt,
        type: 'advanced-content-generation',
        category: selectedCategory,
        template: selectedTemplate,
        variables: templateVariables,
        agent: selectedAgent,
        timestamp: new Date().toISOString()
      };

      const agent = contentGenerationService.agents[selectedAgent];
      const response = await fetch('/api/queue-submit', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({\n          queue: `queue:${agent.queue}`,\n          task,\n          priority: 'normal'\n        })\n      });\n\n      if (response.ok) {\n        const result = await response.json();\n        const mockContent = generateAdvancedMockContent(prompt, selectedCategory, selectedTemplate);\n        setGeneratedContent(mockContent);\n        \n        // Perform quality analysis\n        const analysis = analyzeContentQuality(mockContent, selectedCategory);\n        setQualityAnalysis(analysis);\n        \n        saveToHistory(mockContent, {\n          category: selectedCategory,\n          template: selectedTemplate,\n          agent: selectedAgent,\n          variables: templateVariables,\n          qualityAnalysis: analysis\n        });\n      } else {\n        throw new Error('Failed to submit content generation task');\n      }\n    } catch (error) {\n      console.error('Content generation error:', error);\n      alert('Error generating content. Please try again.');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const executeWorkflow = async () => {\n    setLoading(true);\n    \n    for (let i = 0; i < workflowSteps.length; i++) {\n      const step = workflowSteps[i];\n      \n      // Update step status to in-progress\n      setWorkflowSteps(prev => prev.map(s => \n        s.id === step.id ? { ...s, status: 'in-progress' } : s\n      ));\n      \n      // Simulate step execution\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      // Update step status to completed\n      setWorkflowSteps(prev => prev.map(s => \n        s.id === step.id ? { ...s, status: 'completed', result: `Step ${i + 1} completed successfully` } : s\n      ));\n    }\n    \n    // Generate final content after workflow completion\n    const finalContent = generateWorkflowContent();\n    setGeneratedContent(finalContent);\n    \n    const analysis = analyzeContentQuality(finalContent, selectedCategory);\n    setQualityAnalysis(analysis);\n    \n    setLoading(false);\n  };\n\n  const generateWorkflowContent = () => {\n    return `# Multi-Agent Workflow Content\\n\\n## Research Insights\\n- Market analysis completed with 95% confidence\\n- Target audience preferences identified\\n- Competitive landscape mapped\\n\\n## Content Strategy\\n- Optimized for ${selectedCategory} category\\n- Aligned with brand voice and objectives\\n- Structured for maximum engagement\\n\\n## Generated Content\\n\\nThis is premium content generated through our advanced multi-agent workflow system. Each piece has been:\\n\\n1. **Researched** by our WebScraper agent for accuracy\\n2. **Structured** by Claude for strategic alignment\\n3. **Refined** by GPT-4 for clarity and impact\\n4. **Validated** by DeepSeek for quality assurance\\n5. **Optimized** by Gemini for performance\\n\\n## Key Benefits\\n\\n\u2022 **Multi-perspective analysis** ensures comprehensive coverage\\n\u2022 **Quality assurance** through automated review processes\\n\u2022 **SEO optimization** for maximum discoverability\\n\u2022 **Brand consistency** maintained throughout\\n\\n## Performance Metrics\\n\\n- Expected engagement rate: 85%+\\n- SEO score: 92/100\\n- Readability: Grade 8 level\\n- Brand alignment: 94%\\n\\n*Generated on ${new Date().toLocaleDateString()} using advanced multi-agent workflow*`;\n  };\n\n  const generateAdvancedMockContent = (prompt, category, template) => {\n    const templates = contentGenerationService.templates[category];\n    const templateData = templates[template];\n    \n    if (category === 'business' && template === 'executive-summary') {\n      return `# Executive Summary\\n\\n## Strategic Overview\\nComprehensive analysis of current market position and strategic opportunities for sustainable growth and competitive advantage.\\n\\n## Key Performance Indicators\\n- Revenue Growth: +23% YoY\\n- Market Share: 18.5% (target: 22%)\\n- Customer Retention: 94.2%\\n- Employee Satisfaction: 8.7/10\\n\\n## Strategic Priorities\\n\\n### 1. Market Expansion\\n- Geographic expansion into 3 new markets\\n- Product line diversification\\n- Strategic partnership development\\n\\n### 2. Digital Transformation\\n- AI-powered process automation\\n- Enhanced customer experience platforms\\n- Data-driven decision making\\n\\n### 3. Organizational Excellence\\n- Leadership development programs\\n- Culture transformation initiatives\\n- Performance optimization\\n\\n## Financial Projections\\n\\n| Metric | Q1 2024 | Q2 2024 | Q3 2024 | Q4 2024 |\\n|--------|---------|---------|---------|---------|\\n| Revenue | $2.1M | $2.4M | $2.7M | $3.1M |\\n| Profit | $420K | $504K | $594K | $713K |\\n| Growth | 15% | 18% | 21% | 25% |\\n\\n## Risk Assessment\\n\\n**High Priority Risks:**\\n- Supply chain disruptions\\n- Competitive pressure\\n- Regulatory changes\\n\\n**Mitigation Strategies:**\\n- Diversified supplier network\\n- Innovation investment\\n- Compliance automation\\n\\n## Recommendations\\n\\n1. **Accelerate digital initiatives** - Increase technology investment by 35%\\n2. **Strengthen market position** - Focus on premium segment\\n3. **Enhance operational efficiency** - Implement lean methodologies\\n\\n*Executive summary prepared using advanced AI analysis on ${new Date().toLocaleDateString()}*`;\n    }\n    \n    if (category === 'marketing' && template === 'social-media-post') {\n      return `\ud83d\ude80 **Transform Your Business Strategy Today!** \ud83d\ude80\\n\\n\ud83d\udcca Are you ready to unlock unprecedented growth? Our latest insights reveal the 3 game-changing strategies that industry leaders use to stay ahead:\\n\\n\u2705 **Data-Driven Decision Making** - 73% faster strategic pivots\\n\u2705 **Customer-Centric Innovation** - 2.5x higher retention rates\\n\u2705 **Agile Implementation** - 40% reduced time-to-market\\n\\n\ud83d\udca1 **Pro Tip:** Start with one strategy and master it before moving to the next. Small, consistent changes compound into massive results!\\n\\n\ud83d\udd17 **Ready to dive deeper?** Comment 'STRATEGY' below and we'll send you our complete framework guide!\\n\\n#BusinessStrategy #Innovation #Growth #Leadership #Success\\n\\n---\\n\ud83d\udcf1 **Platform Optimization:**\\n- **LinkedIn:** Professional tone, industry insights\\n- **Instagram:** Visual storytelling, behind-the-scenes\\n- **Twitter:** Quick tips, trending hashtags\\n- **Facebook:** Community engagement, longer-form content\\n\\n\ud83d\udcc8 **Expected Performance:**\\n- Engagement Rate: 4.2%\\n- Reach: 15,000-25,000\\n- Click-through: 2.8%\\n- Conversion: 1.2%`;\n    }\n    \n    return `# Advanced AI-Generated Content\\n\\n## Content Overview\\nProfessional, high-quality content created using advanced AI capabilities and multi-agent collaboration.\\n\\n## Key Features\\n\\n\u2022 **Contextually Aware** - Understands your specific requirements\\n\u2022 **Brand Aligned** - Maintains consistent voice and messaging\\n\u2022 **Performance Optimized** - Designed for maximum impact\\n\u2022 **Quality Assured** - Multi-layer review and validation\\n\\n## Content Details\\n\\n**Category:** ${category}\\n**Template:** ${template || 'Custom'}\\n**Agent:** ${contentGenerationService.agents[selectedAgent].name}\\n**Estimated Quality Score:** ${Math.floor(Math.random() * 20 + 80)}/100\\n\\n## Generated Content\\n\\n${prompt}\\n\\n---\\n\\n*This content was generated using our advanced AI content generation system on ${new Date().toLocaleDateString()}. Quality score and optimization suggestions are available in the analysis panel.*`;\n  };\n\n  const analyzeContentQuality = (content, category) => {\n    // Simulate quality analysis\n    const baseScore = Math.floor(Math.random() * 20 + 75);\n    const criteria = contentGenerationService.qualityMetrics[category]?.criteria || [];\n    \n    const scores = {};\n    criteria.forEach(criterion => {\n      scores[criterion.toLowerCase().replace(/\\s+/g, '_')] = Math.floor(Math.random() * 2 + 3.5);\n    });\n    \n    const suggestions = generateOptimizationSuggestions(scores);\n    \n    return {\n      overallScore: baseScore,\n      criteriaScores: scores,\n      suggestions,\n      wordCount: content.split(' ').length,\n      readabilityScore: Math.floor(Math.random() * 10 + 85),\n      seoScore: Math.floor(Math.random() * 15 + 80)\n    };\n  };\n\n  const resetWorkflow = () => {\n    setWorkflowSteps(prev => prev.map(step => ({ ...step, status: 'pending', result: null })));\n  };\n\n  return (\n    <div className=\"bg-white rounded-lg shadow-lg overflow-hidden\">\n      {/* Header */}\n      <div className=\"bg-gradient-to-r from-purple-600 to-indigo-600 text-white p-6\">\n        <h2 className=\"text-2xl font-bold mb-2\">\ud83e\udde0 Advanced AI Content Generation</h2>\n        <p className=\"text-purple-100\">Multi-agent workflows and intelligent content optimization</p>\n      </div>\n\n      {/* Navigation */}\n      <div className=\"border-b border-gray-200\">\n        <nav className=\"flex space-x-8 px-6\">\n          {['workflow', 'templates', 'custom', 'analytics', 'history'].map((tab) => (\n            <button\n              key={tab}\n              onClick={() => setActiveTab(tab)}\n              className={`py-4 px-2 border-b-2 font-medium text-sm ${\n                activeTab === tab\n                  ? 'border-purple-500 text-purple-600'\n                  : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'\n              }`}\n            >\n              {tab.charAt(0).toUpperCase() + tab.slice(1)}\n            </button>\n          ))}\n        </nav>\n      </div>\n\n      <div className=\"p-6\">\n        {/* Multi-Agent Workflow Tab */}\n        {activeTab === 'workflow' && (\n          <div className=\"space-y-6\">\n            <div className=\"bg-gradient-to-r from-blue-50 to-purple-50 p-6 rounded-lg\">\n              <h3 className=\"text-lg font-semibold text-gray-900 mb-3\">\ud83d\ude80 Multi-Agent Content Workflow</h3>\n              <p className=\"text-gray-600 mb-4\">\n                Our advanced workflow uses multiple specialized AI agents working in sequence to create the highest quality content.\n              </p>\n              \n              <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4 mb-6\">\n                {workflowSteps.map((step, index) => (\n                  <div key={step.id} className=\"text-center\">\n                    <div className={`w-12 h-12 mx-auto rounded-full flex items-center justify-center text-white font-bold mb-2 ${\n                      step.status === 'completed' ? 'bg-green-500' :\n                      step.status === 'in-progress' ? 'bg-blue-500 animate-pulse' :\n                      'bg-gray-300'\n                    }`}>\n                      {step.status === 'completed' ? '\u2713' :\n                       step.status === 'in-progress' ? '...' :\n                       index + 1}\n                    </div>\n                    <h4 className=\"font-medium text-sm text-gray-900\">{step.title}</h4>\n                    <p className=\"text-xs text-gray-500\">{contentGenerationService.agents[step.agent]?.name.split(' ')[0]}</p>\n                    {step.status === 'completed' && (\n                      <p className=\"text-xs text-green-600 mt-1\">\u2713 Complete</p>\n                    )}\n                  </div>\n                ))}\n              </div>\n              \n              <div className=\"flex space-x-4\">\n                <button\n                  onClick={executeWorkflow}\n                  disabled={loading}\n                  className=\"flex-1 bg-gradient-to-r from-purple-600 to-indigo-600 text-white py-3 px-6 rounded-md font-medium hover:from-purple-700 hover:to-indigo-700 disabled:opacity-50\"\n                >\n                  {loading ? '\ud83d\udd04 Executing Workflow...' : '\ud83d\ude80 Start Multi-Agent Generation'}\n                </button>\n                <button\n                  onClick={resetWorkflow}\n                  className=\"px-6 py-3 border border-gray-300 text-gray-700 rounded-md hover:bg-gray-50\"\n                >\n                  \ud83d\udd01 Reset\n                </button>\n              </div>\n            </div>\n            \n            {/* Workflow Progress Details */}\n            <div className=\"space-y-3\">\n              {workflowSteps.map((step) => (\n                <div key={step.id} className={`p-4 rounded-lg border ${\n                  step.status === 'completed' ? 'bg-green-50 border-green-200' :\n                  step.status === 'in-progress' ? 'bg-blue-50 border-blue-200' :\n                  'bg-gray-50 border-gray-200'\n                }`}>\n                  <div className=\"flex justify-between items-start\">\n                    <div>\n                      <h4 className=\"font-medium text-gray-900\">{step.title}</h4>\n                      <p className=\"text-sm text-gray-600\">Agent: {contentGenerationService.agents[step.agent]?.name}</p>\n                    </div>\n                    <span className={`px-2 py-1 text-xs rounded-full ${\n                      step.status === 'completed' ? 'bg-green-100 text-green-800' :\n                      step.status === 'in-progress' ? 'bg-blue-100 text-blue-800' :\n                      'bg-gray-100 text-gray-800'\n                    }`}>\n                      {step.status}\n                    </span>\n                  </div>\n                  {step.result && (\n                    <p className=\"text-sm text-green-700 mt-2\">{step.result}</p>\n                  )}\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n\n        {/* Enhanced Templates Tab */}\n        {activeTab === 'templates' && (\n          <div className=\"space-y-6\">\n            {/* Category and Template Selection */}\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Content Category\n                </label>\n                <select\n                  value={selectedCategory}\n                  onChange={(e) => {\n                    setSelectedCategory(e.target.value);\n                    setSelectedTemplate('');\n                    setTemplateVariables({});\n                  }}\n                  className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\n                >\n                  {categories.map((category) => (\n                    <option key={category} value={category}>\n                      {category.charAt(0).toUpperCase() + category.slice(1)}\n                    </option>\n                  ))}\n                </select>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                  Recommended AI Agent\n                </label>\n                <select\n                  value={selectedAgent}\n                  onChange={(e) => setSelectedAgent(e.target.value)}\n                  className=\"w-full p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\n                >\n                  {agents.map((agent) => (\n                    <option key={agent.id} value={agent.id}>\n                      {agent.name} (Quality: {agent.qualityScore}/10)\n                    </option>\n                  ))}\n                </select>\n              </div>\n            </div>\n\n            {/* Template Grid */}\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-3\">\n                Content Templates\n              </label>\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                {Object.entries(getTemplatesByCategory(selectedCategory)).map(([key, template]) => {\n                  const recommended = getRecommendedAgent(key, selectedCategory);\n                  const isRecommended = recommended.id === selectedAgent;\n                  \n                  return (\n                    <div\n                      key={key}\n                      onClick={() => setSelectedTemplate(key)}\n                      className={`p-4 border-2 rounded-lg cursor-pointer transition-all relative ${\n                        selectedTemplate === key\n                          ? 'border-purple-500 bg-purple-50'\n                          : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'\n                      }`}\n                    >\n                      {isRecommended && (\n                        <span className=\"absolute top-2 right-2 bg-green-100 text-green-800 text-xs px-2 py-1 rounded-full\">\n                          \u2728 Best Match\n                        </span>\n                      )}\n                      <h3 className=\"font-medium text-gray-900 mb-2\">{template.title}</h3>\n                      <p className=\"text-sm text-gray-600 mb-3\">{template.description}</p>\n                      <div className=\"flex justify-between items-center text-xs text-gray-500\">\n                        <span>Est. {estimateGenerationTime(key, selectedCategory, selectedAgent)}</span>\n                        <span className={`px-2 py-1 rounded ${\n                          template.complexity === 'high' ? 'bg-red-100 text-red-700' :\n                          template.complexity === 'medium' ? 'bg-yellow-100 text-yellow-700' :\n                          'bg-green-100 text-green-700'\n                        }`}>\n                          {template.complexity}\n                        </span>\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n\n            {/* Template Variables */}\n            {selectedTemplate && (\n              <div className=\"bg-gray-50 p-6 rounded-lg\">\n                <h4 className=\"font-medium text-gray-900 mb-4\">\ud83d\udcdd Template Variables</h4>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  {contentGenerationService.templates[selectedCategory][selectedTemplate]?.variables?.map((variable) => (\n                    <div key={variable}>\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\n                        {variable.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                      </label>\n                      <input\n                        type=\"text\"\n                        value={templateVariables[variable] || ''}\n                        onChange={(e) => updateTemplateVariable(variable, e.target.value)}\n                        placeholder={`Enter ${variable.replace(/_/g, ' ')}`}\n                        className=\"w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\n                      />\n                    </div>\n                  ))}\n                </div>\n                \n                {/* Preview */}\n                <div className=\"mt-4\">\n                  <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                    \ud83d\udc40 Prompt Preview\n                  </label>\n                  <div className=\"bg-white p-3 border border-gray-200 rounded-md text-sm text-gray-700\">\n                    {formatContentTemplate(selectedTemplate, selectedCategory, templateVariables)}\n                  </div>\n                </div>\n              </div>\n            )}\n\n            {/* Generate Button */}\n            <button\n              onClick={generateSingleContent}\n              disabled={loading || !selectedTemplate}\n              className=\"w-full bg-gradient-to-r from-purple-600 to-indigo-600 text-white py-3 px-6 rounded-md font-medium hover:from-purple-700 hover:to-indigo-700 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center\"\n            >\n              {loading ? (\n                <>\n                  <svg className=\"animate-spin -ml-1 mr-3 h-5 w-5 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                    <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                    <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                  </svg>\n                  Generating with {contentGenerationService.agents[selectedAgent].name}...\n                </>\n              ) : (\n                `\ud83d\ude80 Generate with ${contentGenerationService.agents[selectedAgent].name}`\n              )}\n            </button>\n          </div>\n        )}\n\n        {/* Custom Prompt Tab */}\n        {activeTab === 'custom' && (\n          <div className=\"space-y-6\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-2\">\n                Custom Content Prompt\n              </label>\n              <textarea\n                value={customPrompt}\n                onChange={(e) => setCustomPrompt(e.target.value)}\n                placeholder=\"Enter your detailed content generation prompt here...\"\n                rows={8}\n                className=\"w-full p-4 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\n                <h4 className=\"font-medium text-blue-900 mb-3\">\ud83d\udca1 Advanced Prompt Guidelines</h4>\n                <ul className=\"text-sm text-blue-800 space-y-2\">\n                  <li>\u2022 Specify target audience, tone, and style requirements</li>\n                  <li>\u2022 Include desired word count and format structure</li>\n                  <li>\u2022 Mention key points, themes, or messages to include</li>\n                  <li>\u2022 Add SEO keywords for optimization</li>\n                  <li>\u2022 Specify call-to-action requirements</li>\n                </ul>\n              </div>\n              \n              <div className=\"bg-green-50 p-4 rounded-lg\">\n                <h4 className=\"font-medium text-green-900 mb-3\">\ud83c\udfaf Agent Specializations</h4>\n                <div className=\"text-sm text-green-800 space-y-2\">\n                  {agents.map((agent) => (\n                    <div key={agent.id} className=\"flex justify-between\">\n                      <span>{agent.name.split(' ')[0]}:</span>\n                      <span>{agent.strengths[0]}</span>\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"flex space-x-4\">\n              <select\n                value={selectedAgent}\n                onChange={(e) => setSelectedAgent(e.target.value)}\n                className=\"flex-1 p-3 border border-gray-300 rounded-md focus:ring-2 focus:ring-purple-500 focus:border-purple-500\"\n              >\n                {agents.map((agent) => (\n                  <option key={agent.id} value={agent.id}>\n                    {agent.name}\n                  </option>\n                ))}\n              </select>\n              <button\n                onClick={generateSingleContent}\n                disabled={loading || !customPrompt.trim()}\n                className=\"px-8 py-3 bg-gradient-to-r from-purple-600 to-indigo-600 text-white rounded-md font-medium hover:from-purple-700 hover:to-indigo-700 disabled:opacity-50\"\n              >\n                {loading ? 'Generating...' : '\ud83d\ude80 Generate'}\n              </button>\n            </div>\n          </div>\n        )}\n\n        {/* Analytics Tab */}\n        {activeTab === 'analytics' && qualityAnalysis && (\n          <div className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n              <div className=\"bg-blue-50 p-6 rounded-lg text-center\">\n                <div className=\"text-3xl font-bold text-blue-600\">{qualityAnalysis.overallScore}</div>\n                <div className=\"text-sm text-blue-800\">Overall Quality Score</div>\n              </div>\n              <div className=\"bg-green-50 p-6 rounded-lg text-center\">\n                <div className=\"text-3xl font-bold text-green-600\">{qualityAnalysis.readabilityScore}</div>\n                <div className=\"text-sm text-green-800\">Readability Score</div>\n              </div>\n              <div className=\"bg-purple-50 p-6 rounded-lg text-center\">\n                <div className=\"text-3xl font-bold text-purple-600\">{qualityAnalysis.seoScore}</div>\n                <div className=\"text-sm text-purple-800\">SEO Score</div>\n              </div>\n            </div>\n            \n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n                <h4 className=\"font-medium text-gray-900 mb-4\">\ud83d\udcc8 Quality Criteria Breakdown</h4>\n                <div className=\"space-y-3\">\n                  {Object.entries(qualityAnalysis.criteriaScores).map(([criteria, score]) => (\n                    <div key={criteria} className=\"flex justify-between items-center\">\n                      <span className=\"text-sm text-gray-600\">\n                        {criteria.replace(/_/g, ' ').replace(/\\b\\w/g, l => l.toUpperCase())}\n                      </span>\n                      <div className=\"flex items-center\">\n                        <div className=\"w-20 bg-gray-200 rounded-full h-2 mr-2\">\n                          <div \n                            className=\"bg-blue-500 h-2 rounded-full\" \n                            style={{ width: `${(score / 5) * 100}%` }}\n                          ></div>\n                        </div>\n                        <span className=\"text-sm font-medium\">{score.toFixed(1)}/5</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n              \n              <div className=\"bg-white border border-gray-200 rounded-lg p-6\">\n                <h4 className=\"font-medium text-gray-900 mb-4\">\ud83d\udca1 Optimization Suggestions</h4>\n                <div className=\"space-y-2\">\n                  {qualityAnalysis.suggestions.length > 0 ? (\n                    qualityAnalysis.suggestions.map((suggestion, index) => (\n                      <div key={index} className=\"flex items-start space-x-2\">\n                        <span className=\"text-yellow-500 mt-1\">\u2022</span>\n                        <span className=\"text-sm text-gray-600\">{suggestion}</span>\n                      </div>\n                    ))\n                  ) : (\n                    <p className=\"text-sm text-green-600\">\u2713 No optimization needed - content quality is excellent!</p>\n                  )}\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"bg-gray-50 p-4 rounded-lg\">\n              <h4 className=\"font-medium text-gray-900 mb-2\">\ud83d\udcc4 Content Statistics</h4>\n              <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4 text-center\">\n                <div>\n                  <div className=\"text-lg font-semibold text-gray-900\">{qualityAnalysis.wordCount}</div>\n                  <div className=\"text-xs text-gray-600\">Words</div>\n                </div>\n                <div>\n                  <div className=\"text-lg font-semibold text-gray-900\">{Math.ceil(qualityAnalysis.wordCount / 200)}</div>\n                  <div className=\"text-xs text-gray-600\">Minutes to Read</div>\n                </div>\n                <div>\n                  <div className=\"text-lg font-semibold text-gray-900\">{qualityAnalysis.readabilityScore}</div>\n                  <div className=\"text-xs text-gray-600\">Readability</div>\n                </div>\n                <div>\n                  <div className=\"text-lg font-semibold text-gray-900\">{qualityAnalysis.seoScore}</div>\n                  <div className=\"text-xs text-gray-600\">SEO Score</div>\n                </div>\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* History Tab */}\n        {activeTab === 'history' && (\n          <div className=\"space-y-4\">\n            <div className=\"flex justify-between items-center\">\n              <h3 className=\"text-lg font-medium text-gray-900\">Content Generation History</h3>\n              <button\n                onClick={() => {\n                  localStorage.removeItem('advancedContentHistory');\n                  setContentHistory([]);\n                }}\n                className=\"text-sm text-red-600 hover:text-red-800\"\n              >\n                Clear History\n              </button>\n            </div>\n            \n            {contentHistory.length === 0 ? (\n              <div className=\"text-center py-12 text-gray-500\">\n                <div className=\"text-4xl mb-4\">\ud83d\udcc4</div>\n                <p>No content history available</p>\n                <p className=\"text-sm\">Generate some content to see it appear here</p>\n              </div>\n            ) : (\n              <div className=\"space-y-4\">\n                {contentHistory.map((item) => (\n                  <div key={item.id} className=\"border border-gray-200 rounded-lg p-6 hover:bg-gray-50\">\n                    <div className=\"flex justify-between items-start mb-4\">\n                      <div>\n                        <h4 className=\"font-medium text-gray-900\">\n                          {item.metadata.category} - {item.metadata.template || 'Custom'}\n                        </h4>\n                        <div className=\"flex items-center space-x-4 text-sm text-gray-500 mt-1\">\n                          <span>Generated on {new Date(item.timestamp).toLocaleDateString()}</span>\n                          <span>Agent: {contentGenerationService.agents[item.metadata.agent]?.name.split(' ')[0]}</span>\n                          <span className=\"flex items-center\">\n                            Quality: \n                            <span className={`ml-1 px-2 py-1 rounded text-xs ${\n                              item.qualityScore >= 85 ? 'bg-green-100 text-green-800' :\n                              item.qualityScore >= 70 ? 'bg-yellow-100 text-yellow-800' :\n                              'bg-red-100 text-red-800'\n                            }`}>\n                              {item.qualityScore}/100\n                            </span>\n                          </span>\n                        </div>\n                      </div>\n                      <div className=\"flex space-x-2\">\n                        <button\n                          onClick={() => {\n                            setGeneratedContent(item.content);\n                            setQualityAnalysis(item.metadata.qualityAnalysis);\n                            setActiveTab('analytics');\n                          }}\n                          className=\"text-blue-600 hover:text-blue-800 text-sm font-medium\"\n                        >\n                          View\n                        </button>\n                        <button\n                          onClick={() => navigator.clipboard.writeText(item.content)}\n                          className=\"text-gray-600 hover:text-gray-800 text-sm font-medium\"\n                        >\n                          Copy\n                        </button>\n                      </div>\n                    </div>\n                    <p className=\"text-sm text-gray-600 line-clamp-3\">\n                      {item.content.substring(0, 300)}...\n                    </p>\n                  </div>\n                ))}\n              </div>\n            )}\n          </div>\n        )}\n\n        {/* Generated Content Display */}\n        {generatedContent && activeTab !== 'history' && (\n          <div className=\"mt-8 border-t pt-6\">\n            <div className=\"flex justify-between items-center mb-4\">\n              <h3 className=\"text-lg font-medium text-gray-900\">\ud83d\udcdd Generated Content</h3>\n              <div className=\"flex space-x-2\">\n                <button\n                  onClick={() => navigator.clipboard.writeText(generatedContent)}\n                  className=\"px-3 py-1 text-sm bg-gray-100 text-gray-700 rounded hover:bg-gray-200\"\n                >\n                  \ud83d\udccb Copy\n                </button>\n                <button\n                  onClick={() => {\n                    const blob = new Blob([generatedContent], { type: 'text/plain' });\n                    const url = URL.createObjectURL(blob);\n                    const a = document.createElement('a');\n                    a.href = url;\n                    a.download = `advanced-content-${Date.now()}.txt`;\n                    a.click();\n                  }}\n                  className=\"px-3 py-1 text-sm bg-blue-100 text-blue-700 rounded hover:bg-blue-200\"\n                >\n                  \ud83d\udcbe Download\n                </button>\n                <button\n                  onClick={() => setActiveTab('analytics')}\n                  className=\"px-3 py-1 text-sm bg-purple-100 text-purple-700 rounded hover:bg-purple-200\"\n                >\n                  \ud83d\udcc8 Analyze\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"bg-gray-50 p-6 rounded-lg max-h-96 overflow-y-auto\">\n              <pre className=\"whitespace-pre-wrap text-sm text-gray-800 font-mono\">\n                {generatedContent}\n              </pre>\n            </div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default AdvancedContentGenerator;