version: '3.9'

# Ez Aigent Minimal Stack - Core Services Only
# Agents are dynamically created by the auto-scaler based on load

networks:
  ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  # Redis - Message Queue and Coordination Hub
  redis:
    image: redis:7-alpine
    container_name: ezaigent_redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      ai_network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - REDIS_SAVE=900 1 300 10 60 10000
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'

  # Task Orchestrator - Distributes work to AI agents
  runner:
    build: 
      context: ./cli
      dockerfile: Dockerfile
    container_name: ezaigent_runner
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - FILEMAP_PATH=/shared/filemap.json
      - TOKENPOOL_PATH=/shared/tokenpool.json
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - HEALTH_CHECK_INTERVAL=30000
    volumes:
      - ./src:/src
      - ./shared:/shared
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'

  # Auto-Scaler - Dynamic agent scaling based on load
  autoscaler:
    build: ./cli
    container_name: ezaigent_autoscaler
    restart: unless-stopped
    command: ["node", "auto-scaler.js", "start"]
    environment:
      - REDIS_URL=redis://redis:6379
      - MIN_AGENTS=${MIN_AGENTS:-1}
      - MAX_AGENTS=${MAX_AGENTS:-10}
      - SCALE_UP_THRESHOLD=${SCALE_UP_THRESHOLD:-20}
      - SCALE_DOWN_THRESHOLD=${SCALE_DOWN_THRESHOLD:-5}
      - MONITORING_INTERVAL=15000
      - DOCKER_COMPOSE_FILE=docker-compose.agents.yml
      - PROJECT_NAME=ezaigent
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/app/logs
      - ./docker-compose.agents.yml:/app/docker-compose.agents.yml:ro
    depends_on:
      - redis
      - runner
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'

  # Dashboard - Web Interface and Control Panel
  dashboard:
    build: 
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: ezaigent_dashboard
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
    volumes:
      - ./shared:/shared
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'

  # System Monitor - Health and Performance Tracking
  monitor:
    build: ./cli
    container_name: ezaigent_monitor
    restart: unless-stopped
    command: ["node", "monitor-agents.js", "--interval=30"]
    environment:
      - REDIS_URL=redis://redis:6379
      - MONITORING_INTERVAL=30000
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL:-}
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
      - efficiency_data:/app/efficiency
    depends_on:
      - redis
      - runner
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

  # Efficiency Tracker - Token Usage and Optimization
  efficiency:
    build: ./cli
    container_name: ezaigent_efficiency
    restart: unless-stopped
    command: ["node", "token-efficiency-tracker.js", "monitor"]
    environment:
      - REDIS_URL=redis://redis:6379
      - EFFICIENCY_REPORT_INTERVAL=300000
    volumes:
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      - redis
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'

volumes:
  redis_data:
    driver: local
  
  efficiency_data:
    driver: local