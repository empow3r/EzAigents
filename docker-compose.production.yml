version: '3.9'

# Ez Aigent Multi-Agent System - Production Deployment for Dockge
# Optimized for development server deployment with monitoring and scaling

networks:
  ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

services:
  # Redis - Message Queue and Coordination
  redis:
    image: redis:7-alpine
    container_name: ezaigent_redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      ai_network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    environment:
      - REDIS_SAVE=900 1 300 10 60 10000
    labels:
      - "dockge.name=Redis Queue"
      - "dockge.description=Message queue and coordination service"
      - "dockge.icon=database"

  # Orchestrator/Runner - Task Distribution
  runner:
    build: 
      context: ./cli
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: ezaigent_runner
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - FILEMAP_PATH=/shared/filemap.json
      - TOKENPOOL_PATH=/shared/tokenpool.json
      - LOG_LEVEL=info
      - HEALTH_CHECK_INTERVAL=30000
    volumes:
      - ./src:/src
      - ./shared:/shared
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "dockge.name=Task Orchestrator"
      - "dockge.description=Distributes tasks to AI agents"
      - "dockge.icon=settings"

  # Auto-Scaler Service
  autoscaler:
    build: ./cli
    container_name: ezaigent_autoscaler
    restart: unless-stopped
    command: ["node", "auto-scaler.js", "start"]
    environment:
      - REDIS_URL=redis://redis:6379
      - MIN_AGENTS=1
      - MAX_AGENTS=10
      - SCALE_UP_THRESHOLD=20
      - SCALE_DOWN_THRESHOLD=5
      - MONITORING_INTERVAL=15000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/app/logs
    depends_on:
      - redis
      - runner
    networks:
      - ai_network
    labels:
      - "dockge.name=Auto Scaler"
      - "dockge.description=Automatically scales agents based on load"
      - "dockge.icon=trending-up"

  # Dashboard - Web Interface
  dashboard:
    build: 
      context: ./dashboard
      dockerfile: Dockerfile
      args:
        - NODE_ENV=production
    container_name: ezaigent_dashboard
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
    volumes:
      - ./shared:/shared
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "dockge.name=Dashboard"
      - "dockge.description=Web interface for monitoring and control"
      - "dockge.icon=monitor"
      - "dockge.url=http://localhost:3000"

  # Claude Agent - Architecture & Refactoring
  claude:
    build: ./agents/claude
    container_name: ezaigent_claude
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - API_KEY=${CLAUDE_API_KEY}
      - MODEL=claude-3-opus
      - ROLE=refactor-core
      - MAX_CONTEXT=200000
      - EFFICIENCY_TRACKING=true
    volumes:
      - ./src:/src
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 60s
      timeout: 15s
      retries: 2
    labels:
      - "dockge.name=Claude Agent"
      - "dockge.description=Architecture and refactoring specialist"
      - "dockge.icon=cpu"

  # GPT Agent - Backend Logic
  gpt:
    build: ./agents/gpt
    container_name: ezaigent_gpt
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - API_KEY=${OPENAI_API_KEY}
      - MODEL=gpt-4o
      - ROLE=backend-logic
      - MAX_CONTEXT=128000
      - EFFICIENCY_TRACKING=true
    volumes:
      - ./src:/src
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 60s
      timeout: 15s
      retries: 2
    labels:
      - "dockge.name=GPT Agent"
      - "dockge.description=Backend logic and API specialist"
      - "dockge.icon=code"

  # DeepSeek Agent - Testing & Validation
  deepseek:
    build: ./agents/deepseek
    container_name: ezaigent_deepseek
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - API_KEY_POOL=${DEEPSEEK_API_KEYS}
      - MODEL=deepseek-coder
      - ROLE=test-utils
      - MAX_CONTEXT=32000
      - EFFICIENCY_TRACKING=true
    volumes:
      - ./src:/src
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 60s
      timeout: 15s
      retries: 2
    labels:
      - "dockge.name=DeepSeek Agent"
      - "dockge.description=Testing and validation specialist"
      - "dockge.icon=check-circle"

  # Mistral Agent - Documentation
  mistral:
    build: ./agents/mistral
    container_name: ezaigent_mistral
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - API_KEY=${MISTRAL_API_KEY}
      - MODEL=command-r-plus
      - ROLE=docgen
      - MAX_CONTEXT=32000
      - EFFICIENCY_TRACKING=true
    volumes:
      - ./src:/src
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 60s
      timeout: 15s
      retries: 2
    labels:
      - "dockge.name=Mistral Agent"
      - "dockge.description=Documentation specialist"
      - "dockge.icon=file-text"

  # Gemini Agent - Analysis & Mobile
  gemini:
    build: ./agents/gemini
    container_name: ezaigent_gemini
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - API_KEY=${GEMINI_API_KEY}
      - MODEL=gemini-pro
      - ROLE=analysis
      - MAX_CONTEXT=32000
      - EFFICIENCY_TRACKING=true
    volumes:
      - ./src:/src
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 60s
      timeout: 15s
      retries: 2
    labels:
      - "dockge.name=Gemini Agent"
      - "dockge.description=Analysis and mobile specialist"
      - "dockge.icon=smartphone"

  # Monitoring Service
  monitor:
    build: ./cli
    container_name: ezaigent_monitor
    restart: unless-stopped
    command: ["node", "monitor-agents.js", "--interval=30"]
    environment:
      - REDIS_URL=redis://redis:6379
      - MONITORING_INTERVAL=30000
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL:-}
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
      - efficiency_data:/app/efficiency
    depends_on:
      - redis
      - runner
    networks:
      - ai_network
    labels:
      - "dockge.name=System Monitor"
      - "dockge.description=Monitors system health and performance"
      - "dockge.icon=activity"

  # Efficiency Tracker
  efficiency:
    build: ./cli
    container_name: ezaigent_efficiency
    restart: unless-stopped
    command: ["node", "token-efficiency-tracker.js", "monitor"]
    environment:
      - REDIS_URL=redis://redis:6379
      - EFFICIENCY_REPORT_INTERVAL=300000
    volumes:
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      - redis
    networks:
      - ai_network
    labels:
      - "dockge.name=Efficiency Tracker"
      - "dockge.description=Tracks token usage and optimization"
      - "dockge.icon=trending-up"

volumes:
  redis_data:
    driver: local
    labels:
      - "dockge.name=Redis Data"
      - "dockge.description=Persistent Redis data storage"
  
  efficiency_data:
    driver: local
    labels:
      - "dockge.name=Efficiency Data"
      - "dockge.description=Token efficiency and analytics data"

# Health check for entire stack
x-healthcheck-config: &healthcheck
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s