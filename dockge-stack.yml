# Ez Aigent Multi-Agent System - Dockge Stack Configuration
# Import this file directly into Dockge for one-click deployment
# 
# Instructions:
# 1. Copy this file to your Dockge stacks directory
# 2. Create .env file with your API keys (see .env.production template)
# 3. Import stack in Dockge interface
# 4. Deploy and monitor through Dockge dashboard

version: '3.9'

# Dockge Stack Metadata
x-dockge-stack: &dockge-stack
  name: "ez-aigent"
  description: "AI Multi-Agent SaaS Builder - 10-100+ agents coordinating software development"
  version: "1.0.0"
  author: "Nathan Hart"
  category: "AI/Development"
  icon: "ü§ñ"
  documentation: "https://github.com/your-username/ez-aigent"
  
networks:
  ai_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
    labels:
      - "dockge.network=Ez Aigent Network"

services:
  # Redis - Message Queue and Coordination Hub
  redis:
    image: redis:7-alpine
    container_name: ezaigent_redis
    restart: unless-stopped
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
      - ./config/redis.conf:/usr/local/etc/redis/redis.conf:ro
    command: redis-server /usr/local/etc/redis/redis.conf
    networks:
      ai_network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    environment:
      - REDIS_SAVE=900 1 300 10 60 10000
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    labels:
      # Dockge Labels
      - "dockge.name=Redis Queue"
      - "dockge.description=Message queue and agent coordination service"
      - "dockge.icon=üóÑÔ∏è"
      - "dockge.category=Infrastructure"
      - "dockge.priority=critical"
      - "dockge.healthcheck=redis-cli ping"
      # Stack Metadata
      - "stack.component=infrastructure"
      - "stack.tier=core"

  # Task Orchestrator - Distributes work to AI agents
  runner:
    image: ghcr.io/your-username/ez-aigent-runner:latest
    build: 
      context: ./cli
      dockerfile: Dockerfile
    container_name: ezaigent_runner
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - FILEMAP_PATH=/shared/filemap.json
      - TOKENPOOL_PATH=/shared/tokenpool.json
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - HEALTH_CHECK_INTERVAL=30000
    volumes:
      - ./src:/src
      - ./shared:/shared
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    labels:
      - "dockge.name=Task Orchestrator"
      - "dockge.description=Distributes tasks to AI agents and manages coordination"
      - "dockge.icon=‚öôÔ∏è"
      - "dockge.category=Core"
      - "dockge.priority=critical"
      - "stack.component=orchestration"
      - "stack.tier=core"

  # Auto-Scaler - Dynamic agent scaling based on load
  autoscaler:
    image: ghcr.io/your-username/ez-aigent-runner:latest
    build: ./cli
    container_name: ezaigent_autoscaler
    restart: unless-stopped
    command: ["node", "auto-scaler.js", "start"]
    environment:
      - REDIS_URL=redis://redis:6379
      - MIN_AGENTS=${MIN_AGENTS:-1}
      - MAX_AGENTS=${MAX_AGENTS:-10}
      - SCALE_UP_THRESHOLD=${SCALE_UP_THRESHOLD:-20}
      - SCALE_DOWN_THRESHOLD=${SCALE_DOWN_THRESHOLD:-5}
      - MONITORING_INTERVAL=15000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./logs:/app/logs
    depends_on:
      - redis
      - runner
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
    labels:
      - "dockge.name=Auto Scaler"
      - "dockge.description=Automatically scales agents based on queue depth and performance"
      - "dockge.icon=üìà"
      - "dockge.category=Automation"
      - "dockge.priority=high"
      - "stack.component=scaling"
      - "stack.tier=management"

  # Dashboard - Web Interface and Control Panel
  dashboard:
    image: ghcr.io/your-username/ez-aigent-dashboard:latest
    build: 
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: ezaigent_dashboard
    restart: unless-stopped
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - REDIS_URL=redis://redis:6379
      - NEXT_TELEMETRY_DISABLED=1
      - PORT=3000
    volumes:
      - ./shared:/shared
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 60s
      timeout: 15s
      retries: 3
      start_period: 45s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    labels:
      - "dockge.name=Dashboard"
      - "dockge.description=Web interface for monitoring and controlling the AI agents"
      - "dockge.icon=üñ•Ô∏è"
      - "dockge.category=Interface"
      - "dockge.priority=high"
      - "dockge.url=http://localhost:3000"
      - "dockge.port=3000"
      - "stack.component=ui"
      - "stack.tier=interface"

  # Claude Agent - Architecture and Refactoring Specialist
  claude:
    image: ghcr.io/your-username/ez-aigent-claude:latest
    build: ./agents/claude
    container_name: ezaigent_claude
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - API_KEY=${CLAUDE_API_KEY}
      - MODEL=claude-3-opus
      - ROLE=refactor-core
      - MAX_CONTEXT=200000
      - EFFICIENCY_TRACKING=true
    volumes:
      - ./src:/src
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 120s
      timeout: 20s
      retries: 2
      start_period: 60s
    labels:
      - "dockge.name=Claude Agent"
      - "dockge.description=Architecture and refactoring specialist (200k context)"
      - "dockge.icon=üß†"
      - "dockge.category=AI Agents"
      - "dockge.priority=high"
      - "stack.component=agent"
      - "stack.tier=worker"
      - "stack.agent-type=claude"

  # GPT Agent - Backend Logic Specialist
  gpt:
    image: ghcr.io/your-username/ez-aigent-gpt:latest
    build: ./agents/gpt
    container_name: ezaigent_gpt
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - API_KEY=${OPENAI_API_KEY}
      - MODEL=gpt-4o
      - ROLE=backend-logic
      - MAX_CONTEXT=128000
      - EFFICIENCY_TRACKING=true
    volumes:
      - ./src:/src
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.3'
        reservations:
          memory: 128M
          cpus: '0.1'
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 120s
      timeout: 20s
      retries: 2
      start_period: 60s
    labels:
      - "dockge.name=GPT Agent"
      - "dockge.description=Backend logic and API development specialist"
      - "dockge.icon=‚ö°"
      - "dockge.category=AI Agents"
      - "dockge.priority=high"
      - "stack.component=agent"
      - "stack.tier=worker"
      - "stack.agent-type=gpt"

  # DeepSeek Agent - Testing and Validation Specialist
  deepseek:
    image: ghcr.io/your-username/ez-aigent-deepseek:latest
    build: ./agents/deepseek
    container_name: ezaigent_deepseek
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - API_KEY_POOL=${DEEPSEEK_API_KEYS}
      - MODEL=deepseek-coder
      - ROLE=test-utils
      - MAX_CONTEXT=32000
      - EFFICIENCY_TRACKING=true
    volumes:
      - ./src:/src
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.05'
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 120s
      timeout: 20s
      retries: 2
      start_period: 60s
    labels:
      - "dockge.name=DeepSeek Agent"
      - "dockge.description=Testing and validation specialist (most cost-effective)"
      - "dockge.icon=üß™"
      - "dockge.category=AI Agents"
      - "dockge.priority=medium"
      - "stack.component=agent"
      - "stack.tier=worker"
      - "stack.agent-type=deepseek"

  # Mistral Agent - Documentation Specialist
  mistral:
    image: ghcr.io/your-username/ez-aigent-mistral:latest
    build: ./agents/mistral
    container_name: ezaigent_mistral
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - API_KEY=${MISTRAL_API_KEY}
      - MODEL=command-r-plus
      - ROLE=docgen
      - MAX_CONTEXT=32000
      - EFFICIENCY_TRACKING=true
    volumes:
      - ./src:/src
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.05'
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 120s
      timeout: 20s
      retries: 2
      start_period: 60s
    labels:
      - "dockge.name=Mistral Agent"
      - "dockge.description=Documentation and technical writing specialist"
      - "dockge.icon=üìù"
      - "dockge.category=AI Agents"
      - "dockge.priority=medium"
      - "stack.component=agent"
      - "stack.tier=worker"
      - "stack.agent-type=mistral"

  # Gemini Agent - Analysis and Mobile Specialist
  gemini:
    image: ghcr.io/your-username/ez-aigent-gemini:latest
    build: ./agents/gemini
    container_name: ezaigent_gemini
    restart: unless-stopped
    environment:
      - REDIS_URL=redis://redis:6379
      - API_KEY=${GEMINI_API_KEY}
      - MODEL=gemini-pro
      - ROLE=analysis
      - MAX_CONTEXT=32000
      - EFFICIENCY_TRACKING=true
    volumes:
      - ./src:/src
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.2'
        reservations:
          memory: 64M
          cpus: '0.05'
    healthcheck:
      test: ["CMD", "node", "health-check.js"]
      interval: 120s
      timeout: 20s
      retries: 2
      start_period: 60s
    labels:
      - "dockge.name=Gemini Agent"
      - "dockge.description=Analysis and mobile development specialist"
      - "dockge.icon=üì±"
      - "dockge.category=AI Agents"
      - "dockge.priority=medium"
      - "stack.component=agent"
      - "stack.tier=worker"
      - "stack.agent-type=gemini"

  # System Monitor - Health and Performance Tracking
  monitor:
    image: ghcr.io/your-username/ez-aigent-runner:latest
    build: ./cli
    container_name: ezaigent_monitor
    restart: unless-stopped
    command: ["node", "monitor-agents.js", "--interval=30"]
    environment:
      - REDIS_URL=redis://redis:6379
      - MONITORING_INTERVAL=30000
      - ALERT_WEBHOOK_URL=${ALERT_WEBHOOK_URL:-}
    volumes:
      - ./logs:/app/logs
      - ./reports:/app/reports
      - efficiency_data:/app/efficiency
    depends_on:
      - redis
      - runner
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    labels:
      - "dockge.name=System Monitor"
      - "dockge.description=Monitors system health, performance, and agent coordination"
      - "dockge.icon=üìä"
      - "dockge.category=Monitoring"
      - "dockge.priority=medium"
      - "stack.component=monitoring"
      - "stack.tier=management"

  # Efficiency Tracker - Token Usage and Optimization
  efficiency:
    image: ghcr.io/your-username/ez-aigent-runner:latest
    build: ./cli
    container_name: ezaigent_efficiency
    restart: unless-stopped
    command: ["node", "token-efficiency-tracker.js", "monitor"]
    environment:
      - REDIS_URL=redis://redis:6379
      - EFFICIENCY_REPORT_INTERVAL=300000
    volumes:
      - ./logs:/app/logs
      - efficiency_data:/app/efficiency
    depends_on:
      - redis
    networks:
      - ai_network
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.1'
    labels:
      - "dockge.name=Efficiency Tracker"
      - "dockge.description=Tracks token usage and optimization opportunities"
      - "dockge.icon=‚ö°"
      - "dockge.category=Analytics"
      - "dockge.priority=low"
      - "stack.component=analytics"
      - "stack.tier=management"

volumes:
  redis_data:
    driver: local
    labels:
      - "dockge.name=Redis Data"
      - "dockge.description=Persistent Redis data storage for message queues"
      - "dockge.backup=daily"
  
  efficiency_data:
    driver: local
    labels:
      - "dockge.name=Efficiency Data"
      - "dockge.description=Token efficiency and analytics data storage"
      - "dockge.backup=weekly"

# Dockge Stack Configuration
x-dockge-config:
  stack:
    name: "ez-aigent"
    description: "AI Multi-Agent SaaS Builder Orchestrator"
    category: "AI/Development"
    tags: ["ai", "agents", "automation", "development", "orchestration"]
    
  requirements:
    memory: "4GB"
    cpu: "2 cores"
    disk: "20GB"
    
  ports:
    - port: 3000
      description: "Dashboard Web Interface"
      protocol: "http"
    - port: 6379
      description: "Redis Queue (internal)"
      protocol: "tcp"
      internal: true
      
  environment:
    required:
      - "CLAUDE_API_KEY"
      - "OPENAI_API_KEY"
      - "DEEPSEEK_API_KEYS"
      - "MISTRAL_API_KEY"
      - "GEMINI_API_KEY"
    optional:
      - "MIN_AGENTS"
      - "MAX_AGENTS"
      - "SCALE_UP_THRESHOLD"
      - "SCALE_DOWN_THRESHOLD"
      - "LOG_LEVEL"
      - "ALERT_WEBHOOK_URL"
      
  documentation:
    setup: "https://github.com/your-username/ez-aigent/blob/main/DEPLOYMENT_GUIDE.md"
    api: "https://github.com/your-username/ez-aigent/blob/main/API_DOCUMENTATION.md"
    troubleshooting: "https://github.com/your-username/ez-aigent/blob/main/TROUBLESHOOTING.md"